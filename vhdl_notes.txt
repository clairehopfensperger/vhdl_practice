link to txtbk: http://wuhongyi.cn/FPGANote/pdf/VHDL/FPGAPrototypingbyVHDLExamples.pdf

----------------------------------------------------------------------------------------
general notes:

- pin assignments done in constraints, check pg 23 of txtbk

- artificial failure to cleanly cut off sim in tb, check pg 28 of txtbk
	- assert false 
   	  report "Simulation Completed" 
    	  severity failure;

- doing arithmetic with std_logic_vector/std_logic, must do: 
	- std_logic_vector(unsigned(num_a) [arithmetic, ex. +, -] unsigned (num_b));

- =, >, < evaluate to booleans, so if i want to compare two std_logic_vector/std_logic, I have to do an if statement with the comparison as the condition and then hardcode the result inside the statement.

- different ways to create a clock in a testbench: https://electronics.stackexchange.com/questions/148320/proper-clock-generation-for-vhdl-testbenches
	- check for a simple clocked testbench: https://stackoverflow.com/questions/17904514/vhdl-how-should-i-create-a-clock-in-a-testbench

- setting a std_logic_vector equal to a decimal value:
	- use IEEE.std_logic_arith.ALL;
	- conv_std_logic_vector(number, size (in bits));

- txtbk pg 36 for operators and correlating data types

- txtbk pg 36 for type casting

- library numeric_std introduces unsigned and signed types as well as defines relational and arithmentic operators for the new types

- pg 38 shows acceptable ways to type convert and cast etc

- "others" keyword used like "default"

- '&' is the concatination keyword/character

- pg 53 constants and generics

- pg 56 7-seg display code

- pg 71 starts clocked stuff like D FFs and registers (!!! need to fix register.vhd)
	- when setting a value to 0 on reset, can use "q <=(others=>’O’);" instead of "q <= "0000";"
	- pg 76-78 D FF with synchronous reset (en) and register with multiple inputs (std_logic_vector)

- pg 84 for sequential tb

- implementing an FSM: https://www.allaboutcircuits.com/technical-articles/implementing-a-finite-state-machine-in-vhdl/

----------------------------------------------------------------------------------------
instantiation:

- make separate file with entity and architecture, then use entity instantiation method (see add_2bits)

----------------------------------------------------------------------------------------
if statement:

process(option, [extra stuff]) is
begin

	if option = "00" then
		output <= something;
	elsif option = "01" then
		output <= something_else;
	else
		output <= something_else;
	end if;

end process;

~~~~~~~~~~~~~~~~~~~

case statement:

process(option, [extra stuff]) is
begin

	case option is
		when "00" =>
			output <= something;
		when "01" =>
			output <= something_else;
		when others =>  -- "default"
			output <= something_else;
	end case;

end process;

----------------------------------------------------------------------------------------
structure of vhd file:

-- include libraries 
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- entity is like the module header kind of.
-- port structure: "name : in/out type".
entity practice2 is
    Port (
        a   : in std_logic_vector(1 downto 0);
        b   : in std_logic_vector(1 downto 0);
        c   : out std_logic_vector(1 downto 0)  -- NOTE: don't include ';' on last port
    );
end practice2;

-- architecture is like the always blocks with regs (aka signals) declared inside.
architecture arch_p2 of practice2 is
    -- signals here     
begin
    c <= a xor b; 
end arch_p2;

----------------------------------------------------------------------------------------
structure of tb vhd file:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity tb_practice2 is
    -- leave empty for tb
end tb_practice2;

architecture arch_tb_p2 of tb_practice2 is
    signal in_a, in_b : std_logic_vector(1 downto 0);
    signal out_c : std_logic_vector(1 downto 0);
begin
    -- initialize practice2 
    DUT : entity work.practice2(arch_p2)
        port map(  -- NOTE: use commas here instead of semicolons 
            a => in_a,
            b => in_b,
            c => out_c 
        );
        
    -- tests 
    process  -- for some reason this repeats a ton, let's figure this out - FIXED (see below)
    begin
        -- test 1 
        in_a <= "00";
        in_b <= "01";
        wait for 20 ns;
        
        -- test 2 
        in_a <= "01";
        in_b <= "10";
        wait for 20 ns;
        
        -- test 3 
        in_a <= "11";
        in_b <= "01";
        wait for 20 ns;
        
        --wait;  -- adding this line fixed the repetition 
               -- repetition caused by the "wait for 20 ns" repeats instead of doing 20, 40, 60
   
        -- terminate sim - done so by generating an artificial failure which stops the simulation after the last wait statement
            -- cannot use with "wait"
        assert false 
        report "Simulation Completed" 
        severity failure; 
        
    end process;

end arch_tb_p2;

----------------------------------------------------------------------------------------
